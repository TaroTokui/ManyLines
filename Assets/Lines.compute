#pragma kernel Init
#pragma kernel Update
#pragma kernel Emit

#include "Common.cginc"

// スレッドグループのスレッドサイズ
#define kThreadCount 256

struct LineData
{
	bool Active;
	//float4 BasePosition;
	//float4 Position;
	//float4 Velocity;
	//float4 Normal;
	//float4 Tangent;
	float3 Albedo;
	float Length;
	float Time;
	float LifeTime;
};

RWStructuredBuffer<LineData> LineDataBuffer;
RWStructuredBuffer<float4> PositionBuffer;
RWStructuredBuffer<float4> VelocityBuffer;
RWStructuredBuffer<float4> TangentBuffer;
RWStructuredBuffer<float4> NormalBuffer;

uint InstanceCount;
uint MeshVertices;
float time;	// _Time is already defined at UnityUI.cginc?
float lifeTime;
float4 AirFlow;

float3 rotate_position(float3 position, float3 axis, float angle)
{
	float4 q = quat_from_axis_angle(axis, angle);
	float3 v = position.xyz;
	return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

[numthreads(kThreadCount, 1, 1)]
void Init(uint id : SV_DispatchThreadID)
{
	LineDataBuffer[id].Active = false;
	LineDataBuffer[id].Albedo = float3(0, 0, 1);
	LineDataBuffer[id].Length = 0;
	LineDataBuffer[id].Time = 0;
	LineDataBuffer[id].LifeTime = 0;

	for (uint i = 0; i < MeshVertices; i++)
	{
		uint offs = id * MeshVertices + i;
		PositionBuffer[offs] = float4(id, i, 0, 0);
		VelocityBuffer[offs] = float4(0, 0, 0, 1);
		TangentBuffer[offs] = float4(0, 1, 0, 1);
		NormalBuffer[offs] = float4(1, 0, 0, 1);
	}

	//LineDataBuffer[id].Position = float4(id, id, 2, 1);

}

[numthreads(kThreadCount, 1, 1)]
void Update(uint id : SV_DispatchThreadID)
{
	//LineDataBuffer[id].Albedo = float3(0, 0, 1);
	//LineDataBuffer[id].Length = 0;
	//LineDataBuffer[id].Time = 0;
	LineDataBuffer[id].Time += time;
	if(LineDataBuffer[id].Time > LineDataBuffer[id].LifeTime)
	{
		LineDataBuffer[id].Active = false;
		//return;
	}
	else {

		for (uint i = 0; i < MeshVertices; i++)
		{
			uint offs = id * MeshVertices + i;
			VelocityBuffer[offs] = AirFlow;
			//TangentBuffer[offs] = float4(0, 1, 0, 1);
			//NormalBuffer[offs] = float4(1, 0, 0, 1);
			PositionBuffer[offs] += VelocityBuffer[offs];
			//PositionBuffer[offs] += AirFlow;
		}
	}


}

[numthreads(kThreadCount, 1, 1)]
void Emit(uint id : SV_DispatchThreadID)
{
	LineDataBuffer[id].Active = true;
	//LineDataBuffer[offs].BasePosition = float4(0, 0, 0, 1);
	//LineDataBuffer[offs].Position = float4(0, 0, 0, 1);
	//LineDataBuffer[offs].Velocity = float4(0, 0, 0, 1);
	//LineDataBuffer[offs].Normal = float4(0, 1, 0, 1);
	//LineDataBuffer[offs].Tangent = float4(1, 0, 0, 1);
	//LineDataBuffer[offs].Albedo = float3(1, 1, 1);
	//LineDataBuffer[offs].Length = 0;
	LineDataBuffer[id].Time = 0;
	LineDataBuffer[id].LifeTime = lifeTime;
}