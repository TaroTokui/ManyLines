#pragma kernel Init
#pragma kernel Update

#include "Common.cginc"

// スレッドグループのスレッドサイズ
#define kThreadCount 256

struct LineData
{
    int Active;
    float4 BasePosition;
    float4 Position;
    float4 Velocity;
    float4 Normal;
    float4 Tangent;
    float3 Albedo;
    float Length;
    float Time;
    float LifeTime;
};

RWStructuredBuffer<LineData> LineDataBuffer;

uint InstanceCount;
uint MeshVertices;
float time;	// _Time is already defined at UnityUI.cginc?

float3 rotate_position(float3 position, float3 axis, float angle)
{
	float4 q = quat_from_axis_angle(axis, angle);
	float3 v = position.xyz;
	return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

// 1つのスレッドで1mesh分の頂点を処理している
//[numthreads(ThreadBlockSize, 1, 1)]
//void Init(uint id : SV_DispatchThreadID)
//{
//	for (uint i = 0; i < _MeshVertices; i++)
//	{
//		uint offs = id * _InstanceCount + i;
//		LineDataBuffer[offs].Position = float4(i, id, 0, 0);
//	}
//}

[numthreads(kThreadCount, 1, 1)]
void Init(uint id : SV_DispatchThreadID)
{
	for (uint i = 0; i < MeshVertices; i++)
	{
		uint offs = id * InstanceCount + i;
		LineDataBuffer[offs].Active = false;
		LineDataBuffer[offs].BasePosition = float4(0, 0, 0, 1);
		LineDataBuffer[offs].Position = float4(id, 0, i, 1);
		LineDataBuffer[offs].Velocity = float4(0, 0, 0, 1);
		LineDataBuffer[offs].Normal = float4(0, 1, 0, 1);
		LineDataBuffer[offs].Tangent = float4(1, 0, 0, 1);
		LineDataBuffer[offs].Albedo = float3(1, 1, 1);
		LineDataBuffer[offs].Length = 0;
		LineDataBuffer[offs].Time = 0;
		LineDataBuffer[offs].LifeTime = 0;
	}

	//LineDataBuffer[id].Position = float4(id, id, 2, 1);
}

[numthreads(kThreadCount, 1, 1)]
void Update(uint id : SV_DispatchThreadID)
{
	for (uint i = 0; i < MeshVertices; i++)
	{
		//uint offs = id + i * _InstanceCount;
		uint offs = id * MeshVertices + i;

		float3 pos = LineDataBuffer[offs].BasePosition;
		float speed = 100;//_ParticleDataBuffer[offs].rotationSpeed;

		float3 tx = normalize(pos);
		float3 ty = normalize(cross(RandomVector(offs + 1), tx));

		LineDataBuffer[offs].Position = float4(rotate_position(pos, ty, speed * time), 1);
	}
}
