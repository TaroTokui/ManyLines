#pragma kernel Init
#pragma kernel Update
#pragma kernel Emit

#include "../Common.cginc"
#include "../SimplexNoise3D.cginc"

// スレッドグループのスレッドサイズ
#define kThreadCount 256

struct LineData
{
	bool Active;
	float3 Albedo;
	float Radius;
	float Phi;
	float Time;
	float LifeTime;
};

RWStructuredBuffer<LineData> LineDataBuffer;
RWStructuredBuffer<float4> PositionBuffer;
RWStructuredBuffer<float4> VelocityBuffer;
RWStructuredBuffer<float4> TangentBuffer;
RWStructuredBuffer<float4> NormalBuffer;

uint InstanceCount;
uint MeshVertices;
float DeltaTime;
float LifeTime;
float4 AirFlow;
uint RandomSeed;
float NoiseSpread;
float Radius;
float LineLength;
float Phi;
uint EmitIndex;
uint EmitCount;

float3 rotate_position(float3 position, float3 axis, float angle)
{
	float4 q = quat_from_axis_angle(axis, angle);
	float3 v = position.xyz;
	return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

// Divergence-free noise field
float3 NoiseField(uint id, float3 p)
{
	p += float3(0.9, 1.0, 1.1) * (NoiseSpread * id);
	float3 n1 = snoise(p).xyz;
	float3 n2 = snoise(p + float3(15.3, 13.1, 17.4)).xyz;
	return cross(n1, n2);
}


float4 ResetPosition(int seed, float interval)
{
	return float4(RandomVector01(seed), 1) + float4(0, interval, 0, 0);
}

[numthreads(kThreadCount, 1, 1)]
void Init(uint id : SV_DispatchThreadID)
{
	LineDataBuffer[id].Active = false;
	LineDataBuffer[id].Albedo = float3(1, 1, 1);
	LineDataBuffer[id].Radius = 0;
	LineDataBuffer[id].Time = 0;
	LineDataBuffer[id].LifeTime = 0;

	for (uint i = 0; i < MeshVertices; i++)
	{
		uint offs = id * MeshVertices + i;
		PositionBuffer[offs] = float4(0, 0, 0, 1);
		VelocityBuffer[offs] = float4(0,0,0,1);
		TangentBuffer[offs] = float4(0, 1, 0, 1);
		NormalBuffer[offs] = float4(1, 0, 0, 1);
	}

}

[numthreads(kThreadCount, 1, 1)]
void Update(uint id : SV_DispatchThreadID)
{
	LineDataBuffer[id].Time += DeltaTime;
	if(LineDataBuffer[id].Time > LineDataBuffer[id].LifeTime)
	{
		LineDataBuffer[id].Active = false;
		return;
	}
	
	uint offs = id * MeshVertices;
	float theta = id.x / (float)InstanceCount * 2 * PI + LineDataBuffer[id].Phi;
	float span = LineLength;
	float radius = LineDataBuffer[id].Radius;

	for (uint i = 0; i < MeshVertices; i++)
	{
		uint index = offs + i;
		float param = i / (float)MeshVertices + 0.2;
		float r = radius * param;
		float phi = Phi * param * 2 * PI;
		float angle = theta * (phi>0 ? 1 : -1) + phi;	// 位相差が負の時は回転方向を逆にする
		float3 pos = float3(r*cos(angle), i*span, r*sin(angle));

		PositionBuffer[index].xyz = pos;

	}

}

[numthreads(kThreadCount, 1, 1)]
void Emit(uint id : SV_DispatchThreadID)
{
	// 指定した数だけ出す
	if(id < EmitIndex || EmitIndex + EmitCount < id) return;

	// 既にactiveなやつは飛ばす
	if(LineDataBuffer[id].Active) return;

	LineDataBuffer[id].Active = true;
	LineDataBuffer[id].Time = 0;
	LineDataBuffer[id].LifeTime = LifeTime + RandomVector01(id+ RandomSeed).x * 5;
	LineDataBuffer[id].Radius = Radius + RandomVector01(id+ RandomSeed).y * 5;
	LineDataBuffer[id].Phi = RandomVector01(id+ RandomSeed).z * 2 * PI;

}